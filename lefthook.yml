# Pre-commit configuration with lefthook
# https://github.com/evilmartians/lefthook

pre-commit:
  parallel: true
  commands:
    # OpenAPI specification validation
    spec-lint:
      glob: "{spec/**/*,openapi/**/*}.{yaml,yml,json}"
      run: |
        echo "üîç Linting OpenAPI specifications..."
        npm run spec:lint
      fail_text: "OpenAPI linting failed. Run 'npm run spec:lint' to see details."
    
    # TypeScript and JavaScript linting
    eslint:
      glob: "*.{js,ts,jsx,tsx}"
      exclude: "node_modules/"
      run: |
        echo "üîç Linting TypeScript/JavaScript files..."
        if command -v eslint >/dev/null 2>&1; then
          npx eslint {staged_files}
        else
          echo "ESLint not configured, skipping..."
        fi
      fail_text: "ESLint failed. Fix linting errors before committing."
    
    # Prettier formatting check
    prettier:
      glob: "*.{js,ts,jsx,tsx,json,yaml,yml,md}"
      exclude: "node_modules/"
      run: |
        echo "üé® Checking code formatting..."
        npx prettier --check {staged_files}
      fail_text: "Code formatting issues found. Run 'npx prettier --write .' to fix."
    
    # Python code formatting (if Python files are modified)
    black:
      glob: "*.py"
      run: |
        echo "üêç Checking Python code formatting..."
        if command -v black >/dev/null 2>&1; then
          black --check {staged_files}
        else
          echo "Black not installed, skipping Python formatting check..."
        fi
      fail_text: "Python formatting issues found. Run 'black .' to fix."
    
    # TypeScript compilation check
    typecheck:
      glob: "*.{ts,tsx}"
      run: |
        echo "üîç Running TypeScript compilation check..."
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        else
          echo "No tsconfig.json found, skipping TypeScript check..."
        fi
      fail_text: "TypeScript compilation failed. Fix type errors before committing."

pre-push:
  parallel: false
  commands:
    # Run tests before pushing
    test:
      run: |
        echo "üß™ Running tests before push..."
        npm test
      fail_text: "Tests failed. Fix failing tests before pushing."
    
    # Validate that SDKs are in sync (if spec files changed)
    sdk-verify:
      glob: "{spec/**/*,openapi/**/*}.{yaml,yml,json}"
      run: |
        echo "üîç Verifying SDKs are in sync..."
        if npm run sdk:verify >/dev/null 2>&1; then
          echo "‚úÖ SDKs are in sync"
        else
          echo "‚ö†Ô∏è SDKs may be out of sync. Run 'npm run sdk:gen' if needed."
        fi
      fail_text: "SDK verification failed. Consider running 'npm run sdk:gen'."

commit-msg:
  commands:
    # Conventional commit format check
    commitlint:
      run: |
        echo "üìù Validating commit message format..."
        
        # Read the commit message
        MSG=$(cat {1})
        
        # Check for conventional commit format (basic check)
        if echo "$MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|revert)(\(.+\))?: .+"; then
          echo "‚úÖ Commit message follows conventional format"
        else
          echo "‚ö†Ô∏è Consider using conventional commit format: type(scope): description"
          echo "Examples:"
          echo "  feat: add user authentication"
          echo "  fix(api): resolve pagination issue"
          echo "  docs: update API documentation"
          echo "  chore: update dependencies"
        fi
      fail_text: "Consider improving commit message format."

skip_output:
  - meta
  - summary

colors:
  meta: cyan
  success: green
  failure: red
  skipped: yellow