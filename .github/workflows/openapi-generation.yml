name: "[DEPRECATED] Dynamic OpenAPI Generation"

# This workflow is deprecated and replaced by openapi-ingestion.yml
# It will be removed in a future version once the new pipeline is stable.

on:
  # Temporarily disable automatic triggers
  # schedule:
  #   - cron: '0 0 * * *'  # Run at midnight UTC every day
  
  # Disable push triggers  
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'api/**'
  #     - 'src/**'
  #     - 'lambda/**'
  #     - 'scripts/generate_openapi.js'
  
  # Allow manual trigger only for backward compatibility
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run this deprecated workflow'
        required: true
        default: 'false'
        type: boolean

jobs:
  deprecation-notice:
    runs-on: ubuntu-latest
    steps:
      - name: Deprecation Notice
        run: |
          echo "⚠️ DEPRECATION NOTICE: This workflow is deprecated"
          echo "The dynamic OpenAPI generation has been replaced by the new ingestion pipeline."
          echo "Please use the openapi-ingestion.yml workflow instead."
          echo "This workflow accepts OpenAPI specs from the platform via repository_dispatch events."
          echo ""
          echo "For more information, see: .github/workflows/openapi-ingestion.yml"
          
          if [ "${{ github.event.inputs.force_run }}" != "true" ]; then
            echo "Skipping execution. Set force_run=true to run anyway."
            exit 0
          fi
          
          echo "Proceeding with deprecated workflow as requested..."

  generate-openapi:
    runs-on: ubuntu-latest
    needs: deprecation-notice
    if: github.event.inputs.force_run == 'true'
    # Add permissions for GitHub token
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Use token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g js-yaml
          npm install https axios fs-extra

      - name: Generate OpenAPI specification
        run: |
          echo "Generating OpenAPI specification from live API endpoints..."
          chmod +x ./scripts/generate_openapi.js
          node ./scripts/generate_openapi.js
          
          # Verify generated files
          if [ -f "./spec/openapi.json" ] && [ -f "./spec/openapi.yaml" ]; then
            echo "✅ OpenAPI specification generated successfully"
          else
            echo "❌ Failed to generate OpenAPI specification"
            exit 1
          fi

      - name: Validate OpenAPI specification
        run: |
          echo "Validating OpenAPI specification..."
          npm install -g @apidevtools/swagger-cli
          swagger-cli validate ./spec/openapi.json
          
          if [ $? -eq 0 ]; then
            echo "✅ OpenAPI specification is valid"
          else
            echo "❌ OpenAPI specification validation failed"
            exit 1
          fi

      - name: Publish to API endpoint
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
        run: |
          echo "Publishing OpenAPI JSON to openapi.bondmcp.com/openapi.bondmcp..."
          
          # Install AWS CLI if not already installed
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf awscliv2.zip aws/
          fi
          
          # Upload to S3 (assuming S3 bucket hosts openapi.bondmcp.com)
          if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
            aws s3 cp ./spec/openapi.json s3://openapi.bondmcp.com/openapi.bondmcp --content-type "application/json" --cache-control "max-age=300"
            echo "✅ OpenAPI JSON published to openapi.bondmcp.com/openapi.bondmcp"
          else
            echo "⚠️ AWS credentials not found. Skipping publication to openapi.bondmcp.com/openapi.bondmcp"
          fi

      - name: Commit changes
        run: |
          git config --global user.name "BondMCP Bot"
          git config --global user.email "bot@bondmcp.com"
          
          git add ./spec/openapi.json ./spec/openapi.yaml
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to OpenAPI specification"
          else
            git commit -m "chore: update OpenAPI specification [skip ci]"
            
            # Use configured token for push
            git push origin HEAD:main
            echo "✅ Committed and pushed updated OpenAPI specification"
          fi

      - name: Notify on success
        if: success()
        run: |
          echo "OpenAPI specification successfully generated and published"
          echo "JSON available at openapi.bondmcp.com/openapi.bondmcp"
          echo "YAML available in repository at spec/openapi.yaml"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Failed to generate or publish OpenAPI specification. Check logs for details."
