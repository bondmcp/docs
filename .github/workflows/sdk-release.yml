name: SDK Release Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'openapi/**'
      - 'packages/**'
      - '.changeset/**'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write  # For npm provenance

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      openapi-changed: ${{ steps.changes.outputs.openapi }}
      packages-changed: ${{ steps.changes.outputs.packages }}
      changesets-changed: ${{ steps.changes.outputs.changesets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "openapi=true" >> $GITHUB_OUTPUT
            echo "packages=true" >> $GITHUB_OUTPUT
            echo "changesets=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for OpenAPI changes
          if git diff --name-only HEAD^ HEAD | grep -q "^openapi/"; then
            echo "openapi=true" >> $GITHUB_OUTPUT
          else
            echo "openapi=false" >> $GITHUB_OUTPUT
          fi

          # Check for package changes
          if git diff --name-only HEAD^ HEAD | grep -q "^packages/"; then
            echo "packages=true" >> $GITHUB_OUTPUT
          else
            echo "packages=false" >> $GITHUB_OUTPUT
          fi

          # Check for changeset changes
          if git diff --name-only HEAD^ HEAD | grep -q "^.changeset/"; then
            echo "changesets=true" >> $GITHUB_OUTPUT
          else
            echo "changesets=false" >> $GITHUB_OUTPUT
          fi

  validate-openapi:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.openapi-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Validate OpenAPI specification
        run: |
          pnpm openapi:validate
          echo "✅ OpenAPI specification is valid"

      - name: Bundle OpenAPI specification
        run: |
          pnpm openapi:bundle
          echo "✅ OpenAPI specification bundled successfully"

  regenerate-sdks:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-openapi]
    if: always() && needs.detect-changes.outputs.openapi-changed == 'true' && (needs.validate-openapi.result == 'success' || needs.validate-openapi.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Install OpenAPI Generator
        run: |
          npm install -g @openapitools/openapi-generator-cli
          python -m pip install openapi-python-client

      - name: Generate TypeScript SDK
        run: |
          cd packages/sdk-ts
          npm run generate
          npm run build

      - name: Generate Python SDK
        run: |
          cd sdk-generator
          openapi-generator-cli generate -i ../openapi/bondmcp.v1.yaml -g python-nextgen -o ../python -c config/python-nextgen.json

      - name: Generate Go SDK
        run: |
          cd sdk-generator
          openapi-generator-cli generate -i ../openapi/bondmcp.v1.yaml -g go -o ../go -c config/go.json

      - name: Check for SDK changes
        id: sdk-changes
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No SDK changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "SDK changes detected"
          fi

      - name: Create changeset for SDK regeneration
        if: steps.sdk-changes.outputs.changes == 'true'
        run: |
          cat > .changeset/sdk-regeneration.md << EOF
          ---
          "@bondmcp/sdk": minor
          ---

          Regenerated SDK from updated OpenAPI specification

          - Updated TypeScript SDK with latest API changes
          - Updated Python SDK with latest API changes  
          - Updated Go SDK with latest API changes
          EOF

      - name: Commit SDK changes
        if: steps.sdk-changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "feat: regenerate SDKs from OpenAPI spec changes [automated]"
          git push

  version-and-publish:
    runs-on: ubuntu-latest
    needs: [detect-changes, regenerate-sdks]
    if: always() && (needs.detect-changes.outputs.changesets-changed == 'true' || needs.regenerate-sdks.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: |
          # Build TypeScript SDK
          cd packages/sdk-ts
          npm install
          npm run build
          cd ../..

      - name: Check for pending changesets
        id: check-changesets
        run: |
          if [ -n "$(ls .changeset/*.md 2>/dev/null | grep -v README)" ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release PR or Publish
        if: steps.check-changesets.outputs.has-changesets == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Check if there's already a release PR
          if gh pr list --search "in:title \"Version Packages\"" --state open | grep -q "Version Packages"; then
            echo "Release PR already exists, updating versions and publishing..."
            
            # Update versions
            pnpm changeset:version
            
            # Commit version changes
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add -A
            git commit -m "chore: update package versions [automated]" || echo "No version changes to commit"
            git push
            
            # Publish packages
            cd packages/sdk-ts
            if [ -n "$NPM_TOKEN" ]; then
              npm publish --provenance
              echo "✅ Published @bondmcp/sdk to npm"
            else
              echo "⚠️ NPM_TOKEN not set, skipping npm publish"
            fi
            
          else
            echo "Creating release PR..."
            # This will create a PR with version bumps
            pnpm changeset:version
            git add -A
            git commit -m "chore: version packages [automated]" || echo "No changes to commit"
            git push
          fi

      - name: Publish Python SDK to PyPI
        if: env.PYPI_TOKEN != ''
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          if [ -d "python" ] && [ -f "python/setup.py" ]; then
            cd python
            python -m pip install build twine
            python -m build
            python -m twine upload dist/* --skip-existing
            echo "✅ Published bondmcp-sdk to PyPI"
          else
            echo "⚠️ Python SDK not found, skipping PyPI publish"
          fi

      - name: Create GitHub Release
        if: steps.check-changesets.outputs.has-changesets == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get latest version from package.json
          VERSION=$(cd packages/sdk-ts && node -p "require('./package.json').version")
          
          # Create release
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "See CHANGELOG.md for details" \
            --generate-notes

  test-sdks:
    runs-on: ubuntu-latest
    needs: [regenerate-sdks]
    if: always() && needs.regenerate-sdks.result == 'success'
    strategy:
      matrix:
        sdk: [typescript, python]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.sdk == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        if: matrix.sdk == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Test TypeScript SDK
        if: matrix.sdk == 'typescript'
        run: |
          cd packages/sdk-ts
          npm install
          npm run build
          # npm test  # Uncomment when tests are added

      - name: Test Python SDK
        if: matrix.sdk == 'python'
        run: |
          if [ -d "python" ]; then
            cd python
            python -m pip install -e .
            # python -m pytest  # Uncomment when tests are added
          fi

  contract-testing:
    runs-on: ubuntu-latest
    needs: [validate-openapi]
    if: always() && needs.validate-openapi.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Schemathesis
        run: |
          python -m pip install schemathesis[cli]

      - name: Run contract tests
        env:
          SCHEMATHESIS_BASE_URL: https://staging-api.bondmcp.com/v1
          SCHEMATHESIS_API_KEY: ${{ secrets.STAGING_API_KEY }}
        run: |
          if [ -n "$SCHEMATHESIS_API_KEY" ]; then
            mkdir -p reports
            schemathesis run openapi/bondmcp.v1.yaml \
              --base-url $SCHEMATHESIS_BASE_URL \
              --header "X-API-Key: $SCHEMATHESIS_API_KEY" \
              --max-examples 5 \
              --junit-xml reports/contract-test-results.xml \
              --html reports/contract-test-report.html || true
          else
            echo "⚠️ STAGING_API_KEY not set, skipping contract tests"
          fi

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: contract-test-reports
          path: reports/