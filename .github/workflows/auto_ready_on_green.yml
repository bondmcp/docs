name: Auto-Ready on Green

on:
  workflow_run:
    workflows: ["Contract Ingest & SDK Generation Pipeline"]
    types:
      - completed
name: Auto Ready on Green

jobs:
  auto-ready:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find associated pull request
        id: find_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Finding PR for workflow run..."
          
          # Get the head SHA from the completed workflow run
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Head SHA: ${HEAD_SHA}"
          
          # Find PR by matching head SHA (more accurate than branch name)
          PR_NUMBER=$(gh pr list --state open --json number,headRefOid \
            | jq -r ".[] | select(.headRefOid == \"${HEAD_SHA}\") | .number")
          
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "‚úÖ Found PR #${PR_NUMBER} for SHA ${HEAD_SHA}"
          else
            echo "‚ö†Ô∏è No open PR found for SHA ${HEAD_SHA}"
            echo "pr_number=" >> $GITHUB_OUTPUT
          fi

      - name: Check PR labels and conditions
        id: check_conditions
        if: steps.find_pr.outputs.pr_number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "üîç Checking conditions for PR #${PR_NUMBER}..."
          
          # Get PR labels
          LABELS=$(gh pr view ${PR_NUMBER} --json labels | jq -r '.labels[].name')
          echo "PR Labels: ${LABELS}"
          
          # Check if PR has 'contract' label
          HAS_CONTRACT_LABEL=false
          if echo "${LABELS}" | grep -q "contract"; then
            HAS_CONTRACT_LABEL=true
            echo "‚úÖ PR has 'contract' label"
          else
            echo "‚ùå PR missing 'contract' label"
          fi
          
          # Get PR status
          PR_STATUS=$(gh pr view ${PR_NUMBER} --json isDraft,mergeable,reviewDecision)
          IS_DRAFT=$(echo "${PR_STATUS}" | jq -r '.isDraft')
          IS_MERGEABLE=$(echo "${PR_STATUS}" | jq -r '.mergeable')
          REVIEW_DECISION=$(echo "${PR_STATUS}" | jq -r '.reviewDecision')
          
          echo "Draft: ${IS_DRAFT}"
          echo "Mergeable: ${IS_MERGEABLE}"
          echo "Review Decision: ${REVIEW_DECISION}"
          
          # Determine if PR should be marked ready
          SHOULD_MARK_READY=false
          
          if [ "${HAS_CONTRACT_LABEL}" = "true" ] && \
             [ "${IS_DRAFT}" = "true" ] && \
             [ "${IS_MERGEABLE}" = "MERGEABLE" ]; then
            SHOULD_MARK_READY=true
            echo "‚úÖ All conditions met for auto-ready"
          else
            echo "‚ùå Conditions not met for auto-ready"
            if [ "${HAS_CONTRACT_LABEL}" = "false" ]; then
              echo "  - Missing 'contract' label"
            fi
            if [ "${IS_DRAFT}" = "false" ]; then
              echo "  - PR is not a draft"
            fi
            if [ "${IS_MERGEABLE}" != "MERGEABLE" ]; then
              echo "  - PR is not mergeable"
            fi
          fi
          
          echo "should_mark_ready=${SHOULD_MARK_READY}" >> $GITHUB_OUTPUT

      - name: Mark PR as ready for review
        if: steps.check_conditions.outputs.should_mark_ready == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "üöÄ Marking PR #${PR_NUMBER} as ready for review..."
          
          # Mark PR as ready for review
          gh pr ready ${PR_NUMBER}
          
          # Add a comment explaining the auto-ready action
          gh pr comment ${PR_NUMBER} --body "ü§ñ Auto-Ready Bot: This PR has been automatically marked as ready for review because the contract ingest pipeline completed successfully, the PR has the 'contract' label, all automated checks passed, and no merge conflicts were detected. Please review the generated SDKs, perform manual testing if needed, and approve when ready."
          
          echo "‚úÖ PR #${PR_NUMBER} marked as ready for review"

      - name: Workflow summary
        run: |
          echo "## ü§ñ Auto-Ready on Green Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.find_pr.outputs.pr_number }}" != "" ]; then
            echo "**PR Found:** #${{ steps.find_pr.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
            echo "**Workflow SHA:** ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.check_conditions.outputs.should_mark_ready }}" = "true" ]; then
              echo "**Action:** ‚úÖ PR marked as ready for review" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** All conditions met (contract label + successful pipeline + draft status)" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Action:** ‚è≠Ô∏è No action taken" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** Conditions not met for auto-ready" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Action:** ‚è≠Ô∏è No action taken" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** No associated PR found for workflow run" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** Contract Ingest Pipeline success" >> $GITHUB_STEP_SUMMARY
          echo "- **Required Label:** \`contract\`" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA Matching:** Enhanced accuracy using workflow_run.head_sha" >> $GITHUB_STEP_SUMMARY
      pull-requests: write
      contents: read
    
    steps:
      - name: Find and update draft PRs
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Contract Ingest & SDK Pipeline completed successfully, checking for draft PRs...');
            
            // Get all open pull requests
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(`Found ${pullRequests.length} open pull requests`);
            
            // Filter for draft PRs that match our criteria
            const targetPRs = pullRequests.filter(pr => {
              const isDraft = pr.draft;
              const titleContainsContract = pr.title.toLowerCase().includes('feat(contract-ingest)');
              const hasContractLabel = pr.labels.some(label => label.name === 'contract');
              const hasWIPInTitle = pr.title.includes('[WIP]');
              
              return isDraft && (titleContainsContract || hasContractLabel);
            });
            
            console.log(`Found ${targetPRs.length} draft PRs matching contract criteria`);
            
            for (const pr of targetPRs) {
              console.log(`Processing PR #${pr.number}: "${pr.title}"`);
              
              try {
                // Convert from draft to ready for review
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  draft: false
                });
                
                console.log(`‚úÖ Converted PR #${pr.number} from draft to ready for review`);
                
                // Remove [WIP] prefix from title if present
                let newTitle = pr.title;
                if (newTitle.includes('[WIP]')) {
                  newTitle = newTitle.replace(/\[WIP\]\s*/gi, '').trim();
                  
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    title: newTitle
                  });
                  
                  console.log(`‚úÖ Removed [WIP] prefix from PR #${pr.number} title`);
                }
                
                // Add 'ready-for-review' label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['ready-for-review']
                });
                
                console.log(`‚úÖ Added 'ready-for-review' label to PR #${pr.number}`);
                
                // Add a comment to notify about the auto-conversion
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `üöÄ **Auto-Ready Conversion**\n\nThis PR has been automatically converted from draft to "Ready for Review" because the **Contract Ingest & SDK Pipeline** completed successfully.\n\n‚úÖ Contract ingestion and SDK generation completed\n‚úÖ PR is now ready for review\n‚úÖ Added \`ready-for-review\` label\n${newTitle !== pr.title ? '‚úÖ Removed [WIP] prefix from title\n' : ''}\nPlease ensure all items in the readiness checklist are completed before merging.`
                });
                
                console.log(`‚úÖ Added notification comment to PR #${pr.number}`);
                
              } catch (error) {
                console.error(`‚ùå Failed to process PR #${pr.number}:`, error.message);
              }
            }
            
            if (targetPRs.length === 0) {
              console.log('No draft PRs found matching contract criteria');
            } else {
              console.log(`‚úÖ Successfully processed ${targetPRs.length} PR(s)`);
            }
