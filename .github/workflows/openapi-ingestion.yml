name: OpenAPI Spec Ingestion & SDK Publishing

on:
  repository_dispatch:
    types: [openapi_spec_updated]
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      spec_version:
        description: 'Version of the OpenAPI spec'
        required: true
        default: '1.0.0'
      spec_url:
        description: 'URL to the OpenAPI spec'
        required: true
        default: 'https://api.bondmcp.com/openapi.json'
      checksum:
        description: 'SHA256 checksum of the spec'
        required: true

jobs:
  ingest-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          # Install Node.js tools
          npm install -g js-yaml @apidevtools/swagger-cli openapi-diff
          
          # Install Python tools
          pip install hatch twine openapi-python-client

      - name: Check legacy quarantine
        run: |
          echo "üîç Checking legacy OpenAPI generator quarantine..."
          node scripts/check_legacy_quarantine.js
          echo "‚úÖ Legacy quarantine check passed"

      - name: Extract event data
        id: event_data
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            echo "checksum=${{ github.event.client_payload.checksum }}" >> $GITHUB_OUTPUT
            echo "spec_url=${{ github.event.client_payload.spec_url }}" >> $GITHUB_OUTPUT
            echo "change_type=${{ github.event.client_payload.change_type }}" >> $GITHUB_OUTPUT
            echo "source_repo=${{ github.event.client_payload.source_repo }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.spec_version }}" >> $GITHUB_OUTPUT
            echo "checksum=${{ github.event.inputs.checksum }}" >> $GITHUB_OUTPUT
            echo "spec_url=${{ github.event.inputs.spec_url }}" >> $GITHUB_OUTPUT
            echo "change_type=manual" >> $GITHUB_OUTPUT
            echo "source_repo=manual" >> $GITHUB_OUTPUT
          fi

      - name: Validate platform dispatch payload
        run: |
          echo "üîç Validating repository_dispatch payload..."
          
          # Create payload file for validation
          cat > payload.json << EOF
          {
            "version": "${{ steps.event_data.outputs.version }}",
            "checksum": "${{ steps.event_data.outputs.checksum }}",
            "change_type": "${{ steps.event_data.outputs.change_type }}",
            "download_url": "${{ steps.event_data.outputs.spec_url }}",
            "source_repo": "${{ steps.event_data.outputs.source_repo }}"
          }
          EOF
          
          # Validate using our validation script
          node scripts/validate_platform_dispatch.mjs payload.json
          
          echo "‚úÖ Payload validation passed"

      - name: Download and verify OpenAPI spec
        id: download_spec
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          CHECKSUM="${{ steps.event_data.outputs.checksum }}"
          SPEC_URL="${{ steps.event_data.outputs.spec_url }}"
          
          echo "Downloading OpenAPI spec version $VERSION from $SPEC_URL"
          
          # Download the spec
          curl -f -s -o temp_spec.json "$SPEC_URL"
          
          # Verify checksum
          ACTUAL_CHECKSUM=$(sha256sum temp_spec.json | cut -d' ' -f1)
          if [ "$ACTUAL_CHECKSUM" != "$CHECKSUM" ]; then
            echo "‚ùå Checksum verification failed"
            echo "Expected: $CHECKSUM"
            echo "Actual: $ACTUAL_CHECKSUM"
            exit 1
          fi
          
          echo "‚úÖ Checksum verified: $CHECKSUM"
          echo "spec_path=temp_spec.json" >> $GITHUB_OUTPUT

      - name: Validate OpenAPI spec
        run: |
          echo "Validating OpenAPI specification..."
          
          # Use swagger-cli for basic validation
          swagger-cli validate temp_spec.json
          
          # Use our enhanced validation script
          node scripts/validate_openapi.mjs temp_spec.json
          
          echo "‚úÖ OpenAPI specification validation passed"

      - name: Check if version already exists
        id: check_version
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          HISTORY_FILE="openapi/history/openapi-$VERSION.json"
          
          if [ -f "$HISTORY_FILE" ]; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Version $VERSION already exists, skipping ingestion"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ New version $VERSION, proceeding with ingestion"
          fi

      - name: Store immutable snapshot
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          CHECKSUM="${{ steps.event_data.outputs.checksum }}"
          SPEC_URL="${{ steps.event_data.outputs.spec_url }}"
          
          # Store in history
          cp temp_spec.json "openapi/history/openapi-$VERSION.json"
          
          # Update latest.json
          cat > openapi/latest.json << EOF
          {
            "version": "$VERSION",
            "checksum": "$CHECKSUM",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "spec_url": "$SPEC_URL"
          }
          EOF
          
          echo "‚úÖ Stored immutable snapshot for version $VERSION"

      - name: Generate semantic diff
        if: steps.check_version.outputs.version_exists == 'false'
        id: generate_diff
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          
          # Check if there's a previous version to compare against
          LATEST_HISTORY=$(ls -v openapi/history/openapi-*.json 2>/dev/null | tail -2 | head -1 || echo "")
          
          if [ -n "$LATEST_HISTORY" ] && [ "$LATEST_HISTORY" != "openapi/history/openapi-$VERSION.json" ]; then
            PREV_VERSION=$(basename "$LATEST_HISTORY" .json | sed 's/openapi-//')
            echo "Generating semantic diff from $PREV_VERSION to $VERSION"
            
            # Use our enhanced diff generation script
            node scripts/generate_spec_diff.mjs "$PREV_VERSION" "$VERSION" markdown
            node scripts/generate_spec_diff.mjs "$PREV_VERSION" "$VERSION" json
            
            echo "has_diff=true" >> $GITHUB_OUTPUT
            echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Generated semantic diff and migration notes"
          else
            echo "has_diff=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No previous version found, skipping diff generation"
          fi

      - name: Generate TypeScript SDK
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          echo "Generating TypeScript SDK..."
          
          # Install SDK generation tools
          npm install -g @openapitools/openapi-generator-cli
          
          # Generate TypeScript client
          openapi-generator-cli generate \
            -i temp_spec.json \
            -g typescript-axios \
            -o javascript/generated \
            --additional-properties=supportsES6=true,npmName=@bondmcp/sdk,npmVersion=${{ steps.event_data.outputs.version }}
          
          # Copy generated files to proper structure
          mkdir -p javascript/src/generated
          cp -r javascript/generated/* javascript/src/generated/
          
          # Update package.json version
          cd javascript
          npm version ${{ steps.event_data.outputs.version }} --no-git-tag-version
          
          echo "‚úÖ TypeScript SDK generated"

      - name: Generate Python SDK
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          echo "Generating Python SDK..."
          
          # Generate Python client
          openapi-generator-cli generate \
            -i temp_spec.json \
            -g python \
            -o python/generated \
            --additional-properties=packageName=bondmcp_sdk,packageVersion=${{ steps.event_data.outputs.version }}
          
          # Copy generated files to proper structure
          mkdir -p python/bondmcp_sdk/generated
          cp -r python/generated/bondmcp_sdk/* python/bondmcp_sdk/generated/
          
          # Update pyproject.toml version
          sed -i 's/version = "[^"]*"/version = "${{ steps.event_data.outputs.version }}"/' pyproject.toml
          
          echo "‚úÖ Python SDK generated"

      - name: Build TypeScript SDK
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          cd javascript
          npm install
          npm run build
          echo "‚úÖ TypeScript SDK built successfully"

      - name: Build Python SDK
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          python -m hatch build
          echo "‚úÖ Python SDK built successfully"

      - name: Publish TypeScript SDK to npm
        if: steps.check_version.outputs.version_exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -n "$NODE_AUTH_TOKEN" ]; then
            cd javascript
            npm publish --access public
            echo "‚úÖ TypeScript SDK published to npm"
          else
            echo "‚ö†Ô∏è NPM_TOKEN not found, skipping npm publish"
          fi

      - name: Publish Python SDK to PyPI
        if: steps.check_version.outputs.version_exists == 'false'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          if [ -n "$TWINE_PASSWORD" ]; then
            python -m twine upload dist/*
            echo "‚úÖ Python SDK published to PyPI"
          else
            echo "‚ö†Ô∏è PYPI_TOKEN not found, skipping PyPI publish"
          fi

      - name: Update CHANGELOG.md
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          CHANGE_TYPE="${{ steps.event_data.outputs.change_type }}"
          
          # Prepare changelog options
          CHANGELOG_OPTIONS="$VERSION $CHANGE_TYPE"
          
          if [ "${{ steps.generate_diff.outputs.has_diff }}" = "true" ]; then
            PREV_VERSION="${{ steps.generate_diff.outputs.prev_version }}"
            CHANGELOG_OPTIONS="$CHANGELOG_OPTIONS --migration MIGRATIONS/$PREV_VERSION-to-$VERSION.md --diff openapi/history/diff-$PREV_VERSION-to-$VERSION.md"
          fi
          
          # Use our changelog automation script
          node scripts/update_changelog.mjs $CHANGELOG_OPTIONS
          
          echo "‚úÖ Updated CHANGELOG.md using automation script"

      - name: Update API changelog
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          DATE=$(date -u +"%Y-%m-%d")
          
          # Update docs/api/changelog.md
          cat > temp_api_changelog.md << EOF
          # API Changelog
          
          This file tracks all changes to the BondMCP API in reverse chronological order.
          
          ## Format
          
          Each entry includes:
          - **Version**: The API version number
          - **Date**: When the version was released
          - **Changes**: Summary of changes made
          - **Migration**: Link to migration guide if applicable
          
          ---
          
          ## [$VERSION] - $DATE
          
          ### Changes
          - API specification updated to version $VERSION
          EOF
          
          if [ "${{ steps.generate_diff.outputs.has_diff }}" = "true" ]; then
            PREV_VERSION="${{ steps.generate_diff.outputs.prev_version }}"
            echo "- Migration guide: [MIGRATIONS/$PREV_VERSION-to-$VERSION.md](../../MIGRATIONS/$PREV_VERSION-to-$VERSION.md)" >> temp_api_changelog.md
            echo "- Semantic diff: [openapi/history/diff-$PREV_VERSION-to-$VERSION.md](../../openapi/history/diff-$PREV_VERSION-to-$VERSION.md)" >> temp_api_changelog.md
          fi
          
          echo "" >> temp_api_changelog.md
          
          # Append existing content if it exists
          if [ -f docs/api/changelog.md ]; then
            # Skip the header and append the rest
            tail -n +12 docs/api/changelog.md >> temp_api_changelog.md
          fi
          
          mv temp_api_changelog.md docs/api/changelog.md
          echo "‚úÖ Updated API changelog"

      - name: Commit and push changes
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          
          git config --global user.name "BondMCP Bot"
          git config --global user.email "bot@bondmcp.com"
          
          # Add all changes
          git add openapi/ MIGRATIONS/ docs/api/ CHANGELOG.md javascript/ python/ pyproject.toml
          
          # Clean up temporary files
          rm -f temp_spec.json payload.json javascript/generated python/generated
          
          # Commit changes
          git commit -m "feat: ingest OpenAPI spec v$VERSION and publish SDKs

          - Added immutable snapshot: openapi/history/openapi-$VERSION.json
          - Updated latest spec: openapi/latest.json
          - Generated and published TypeScript SDK v$VERSION
          - Generated and published Python SDK v$VERSION
          - Updated documentation and changelogs
          
          [automated]"
          
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          
          echo "‚úÖ Changes committed and pushed"

      - name: Create frontend dependency bump PR
        if: steps.check_version.outputs.version_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          
          echo "üîÑ Creating frontend dependency bump PR..."
          
          # Use our stub script to create/prepare frontend PR
          node scripts/create_frontend_bump_pr.mjs "$VERSION"
          
          echo "‚úÖ Frontend bump PR creation completed (check output for manual steps if needed)"

      - name: Summary
        if: always()
        run: |
          VERSION="${{ steps.event_data.outputs.version }}"
          
          if [ "${{ steps.check_version.outputs.version_exists }}" = "true" ]; then
            echo "‚ÑπÔ∏è Version $VERSION already exists, no action taken"
          else
            echo "‚úÖ Successfully processed OpenAPI spec version $VERSION"
            echo "üì¶ SDKs published:"
            echo "  - TypeScript: @bondmcp/sdk@$VERSION"
            echo "  - Python: bondmcp-sdk==$VERSION"
            echo "üìö Documentation updated:"
            echo "  - CHANGELOG.md"
            echo "  - docs/api/changelog.md"
            if [ "${{ steps.generate_diff.outputs.has_diff }}" = "true" ]; then
              PREV_VERSION="${{ steps.generate_diff.outputs.prev_version }}"
              echo "  - MIGRATIONS/$PREV_VERSION-to-$VERSION.md"
            fi
          fi